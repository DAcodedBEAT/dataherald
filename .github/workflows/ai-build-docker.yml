name: AI Build Docker Image

on:
  workflow_call:
    secrets:
      SUBMODULE_UPDATE_TOKEN:
        description: "Token to update submodules"
        required: true
      AWS_ACCESS_KEY_ID:
        description: "AWS Access Key ID"
        required: true
      AWS_SECRET_ACCESS_KEY:
        description: "AWS Secret Access Key"
        required: true

    inputs:
      target_app:
        description: "The target backend app to build the docker image for. Possible values are `engine`, `server`, or `slackbot`"
        required: true
        type: string
      ecr_repository:
        description: "The ECR repository to push the image to"
        required: true
        type: string
      ecs_service_name:
        description: "The ECS service name"
        required: true
        type: string
      container_name:
        description: "The container name to update in the ECS service task definition"
        required: true
        type: string

    outputs:
      docker_image:
        description: "Docker image"
        value: ${{ jobs.build-docker-image.outputs.docker_image }}

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: k2
  ECR_REPOSITORY: ${{ inputs.ecr_repository }}
  ECS_SERVICE: ${{ inputs.ecs_service_name }}
  CONTAINER_NAME: ${{ inputs.container_name }}

jobs:
  build-docker-image:
    name: Build Docker Image
    runs-on: ubuntu-latest

    outputs:
      docker_image: ${{ steps.build-image.outputs.docker_image }}

    steps:
      - name: Check out code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.SUBMODULE_UPDATE_TOKEN }}
          submodules: true

      - name: Use Node.js
        if: inputs.target_app == 'slackbot'
        uses: actions/setup-node@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          if [ ${{ inputs.target_app }} == "engine" ]; then
            git submodule init
            git submodule update
            cd apps/ai/server/dataherald
            ls
          elif [ ${{ inputs.target_app }} == "server" ]; then
            cd apps/ai/server
          elif [ ${{ inputs.target_app }} == "slackbot" ]; then
            cd apps/ai/clients/slack
            npm install -g pnpm
            pnpm install
          fi
          echo building dockerfile
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "docker_image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
