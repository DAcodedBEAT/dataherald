name: Deploy Environment

on:
  workflow_call:
    inputs:
      target_env:
        description: "The target environment to deploy to. Possible values are: `stage` or `prod`"
        required: true
        type: string

env:
  SLACK_WEBHOOK: ${{ secrets.GH_SLACK_WEBHOOK_URL }}
  SLACK_ICON: https://files.dataherald.com/random/github-actions.png
  SLACK_USERNAME: GitHub Actions
  SLACK_CHANNEL: eng-notifications

jobs:
  check-changes:
    name: Check Changes
    uses: ./.github/workflows/ai-check-changes.yml
    with:
      target_env: ${{ inputs.target_env }}

  resolve-env-db-url:
    runs-on: ubuntu-latest
    name: Get Database URL
    outputs:
      db_url: ${{ steps.get-db-url.outputs.db_url }}
    steps:
      - name: Get DB URL
        id: get-db-url
        run: |
          if [ ${{ inputs.target_env }} == 'stage' ]; then
            echo "db_url=${{ vars.STAGING_MONGODB_URI}}/k2-stage-serverless" >> $GITHUB_OUTPUT
          else 
            echo "db_url=${{vars.PRODUCTION_MONGODB_URI}}/k2-serverless" >> $GITHUB_OUTPUT
          fi

  migrate-db:
    name: Migrate Database
    needs: [resolve-env-db-url]
    uses: ./.github/workflows/ai-migrate-db.yml
    secrets: inherit
    with:
      target_db_url: ${{ needs.resolve-env-db-url.outputs.db_url }}

  build-engine:
    name: Build Engine
    needs: check-changes
    if: needs.check-changes.outputs.engine_changed == 'true' || needs.check-changes.outputs.server_changed == 'true'
    uses: ./.github/workflows/ai-build-docker.yml
    secrets: inherit
    with:
      target_app: engine
      target_env: ${{ inputs.target_env }}
      image_tag: ${{ github.sha }}

  build-server:
    name: Build Server
    needs: check-changes
    if: needs.check-changes.outputs.engine_changed == 'true' || needs.check-changes.outputs.server_changed == 'true'
    uses: ./.github/workflows/ai-build-docker.yml
    secrets: inherit
    with:
      target_app: server
      target_env: ${{ inputs.target_env }}
      image_tag: ${{ github.sha }}

  deploy-backend:
    name: Deploy Backend
    needs: [build-engine, build-server]
    uses: ./.github/workflows/ai-deploy-backend.yml
    secrets: inherit
    with:
      target_env: ${{ inputs.target_env }}
      engine_image: ${{ needs.build-engine.outputs.docker_image }}
      server_image: ${{ needs.build-server.outputs.docker_image }}

  build-slackbot:
    name: Build Slackbot
    needs: [check-changes]
    if: needs.check-changes.outputs.slackbot_changed == 'true'
    uses: ./.github/workflows/ai-build-docker.yml
    secrets: inherit
    with:
      target_app: slackbot
      target_env: ${{ inputs.target_env }}
      image_tag: ${{ github.sha }}

  deploy-slackbot:
    name: Deploy Slackbot
    needs: [build-slackbot, deploy-backend]
    if: needs.build-slackbot.result != 'failure' && needs.deploy-backend.result != 'failure'
    uses: ./.github/workflows/ai-deploy-docker-ecs.yml
    secrets: inherit
    with:
      docker_image: ${{ needs.build-slackbot.outputs.docker_image }}
      ecs_service_name: ai-slackbot-${{ inputs.target_env }}
      ecs_task_definition: ./apps/ai/clients/slack/.aws/task-definition-${{ inputs.target_env }}.json
      container_name: ai-slackbot-${{ inputs.target_env }}

  deploy-frontend:
    name: Deploy Console
    needs: [check-changes, deploy-backend]
    if: needs.check-changes.outputs.console_changed == 'true' &&  needs.deploy-backend.result != 'failure'
    uses: ./.github/workflows/ai-deploy-frontend.yml
    secrets: inherit
    with:
      target_env: ${{ inputs.target_env }}

  slack-notification-env:
    name: Set Environment Messages
    runs-on: ubuntu-latest
    outputs:
      environment: ${{ steps.set-slack-env.outputs.environment }}
    steps:
      - name: Set env messages
        id: set-slack-env
        run: |
          if [ ${{ inputs.target_env }} == 'stage' ]; then
            echo "environment=STAGE" >> $GITHUB_OUTPUT
          else
            echo "environment=PRODUCTION" >> $GITHUB_OUTPUT
          fi

  send-cancelled-slack-notification:
    name: Send Cancelled Slack Notification
    needs:
      [
        slack-notification-env,
        migrate-db,
        deploy-backend,
        deploy-slackbot,
        deploy-frontend,
      ]
    if: cancelled()
    runs-on: ubuntu-latest
    steps:
      - name: Send cancelled notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: ${{ needs.slack-notification-env.outputs.environment }} Deployment CANCELLED
          SLACK_MESSAGE: |
            The ${{ needs.slack-notification-env.outputs.environment }} environment deployment was cancelled.

            *WARNING:* Some artifacts could be deployed before cancelled. Please check the GitHub Actions logs for more details.
          SLACK_COLOR: cancelled

  send-failure-slack-notification:
    name: Send Failure Slack Notification
    needs:
      [
        slack-notification-env,
        migrate-db,
        deploy-backend,
        deploy-slackbot,
        deploy-frontend,
      ]
    if: needs.migrate-db == 'failure' || needs.deploy-backend.result == 'failure' || needs.deploy-slackbot.result == 'failure' || needs.deploy-frontend.result == 'failure'
    runs-on: ubuntu-latest
    steps:
      - name: Send failed notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: ${{ needs.slack-notification-env.outputs.environment }} Deployment FAILED
          SLACK_MESSAGE: |
            The ${{ needs.slack-notification-env.outputs.environment }} environment deployment failed. One or more of the deployment jobs failed.

            *WARNING:* Some artifacts could be deployed before failure. Please check the GitHub Actions logs for more details.
          SLACK_COLOR: failure

  send-success-slack-notification:
    name: Send Success Slack Notification
    needs:
      [
        slack-notification-env,
        migrate-db,
        deploy-backend,
        deploy-slackbot,
        deploy-frontend,
      ]
    if: needs.migrate-db != 'failure' && needs.deploy-backend.result != 'failure' && needs.deploy-slackbot.result != 'failure' && needs.deploy-frontend.result != 'failure'
    runs-on: ubuntu-latest
    steps:
      - name: Setup URLs
        id: setup-urls
        run: |
          if [ ${{ inputs.target_env }} == 'stage' ]; then
            echo "API_URL=https://stage.api.dataherald.ai" >> $GITHUB_OUTPUT
            echo "CONSOLE_URL=https://stage.console.dataherald.ai" >> $GITHUB_OUTPUT
          else
            echo "API_URL=https://api.dataherald.ai" >> $GITHUB_OUTPUT
            echo "CONSOLE_URL=https://console.dataherald.ai" >> $GITHUB_OUTPUT
          fi
      - name: Send success notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_TITLE: ${{ needs.slack-notification-env.outputs.environment }} Deployment SUCCEEDED
          SLACK_MESSAGE: |
            The ${{ needs.slack-notification-env.outputs.environment }} environment deployment succeeded. More details:

            *API URL*: ${{ steps.setup-urls.outputs.API_URL }}
            *Console URL*: ${{ steps.setup-urls.outputs.CONSOLE_URL }}
          SLACK_COLOR: success
