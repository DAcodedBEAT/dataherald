name: ai-server-stage

on:
  push:
    paths:
      - .github/workflows/ai-k2-server-stage.yml # this file
      - apps/ai/server/**
    branches:
      - main 

env:
  AWS_REGION: us-east-1               
  ECR_K2_SERVER_REPOSITORY: k2-server-stage
  ECS_SERVICE: k2-stage  
  ECS_CLUSTER: k2             
  ECS_TASK_DEFINITION: apps/ai/server/.aws/task-definition-stage.json

  K2_SERVER_CONTAINER_NAME: k2-server-stage


jobs:
  build-push-deploy-image:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest

    defaults:
      run: 
        working-directory: ./apps/ai/server

    steps:
      - name: Check out code
        uses: actions/checkout@v2
      
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_K2_SERVER_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_K2_SERVER_REPOSITORY:$IMAGE_TAG
          echo "k2_server_image=$ECR_REGISTRY/$ECR_K2_SERVER_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def-2
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.K2_SERVER_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.k2_server_image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def-2.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
